import re

def quick_annotate(text):
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    """
    print("=" * 60)
    print("–¢–ï–ö–°–¢ –î–õ–Ø –†–ê–ó–ú–ï–¢–ö–ò:")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
    preview = text[:300] + "..." if len(text) > 300 else text
    print(preview)
    print("=" * 60)
    
    # –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    products = input("–í–≤–µ–¥–∏—Ç–µ –õ–ò–®–¨ –û–ß–ï–í–ò–î–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;): ")
    
    if not products.strip() or products.strip().lower() == '–Ω–µ—Ç':
        return []
        
    return [p.strip() for p in products.split(';') if p.strip()]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
def fast_annotation():
    with open('for_annotation.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    
    texts = content.split('=' * 80)
    results = []
    
    for i, text_block in enumerate(texts):
        if not text_block.strip() or i >= 22:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7
            continue
            
        url_match = re.search(r'URL: (.*?)\n', text_block)
        text_match = re.search(r'TEXT \d+:\n(.*?)$', text_block, re.DOTALL)
        
        if url_match and text_match:
            print(f"\nüìù –†–ê–ó–ú–ï–¢–ö–ê {i+1}/22")
            products = quick_annotate(text_match.group(1).strip())
            
            if products:
                results.append({
                    'text': text_match.group(1).strip(),
                    'products': products
                })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    import json
    with open('quick_annotations.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–∞–∑–º–µ—á–µ–Ω–æ {len(results)} —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞ ~{len(results)*5} –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    fast_annotation()
